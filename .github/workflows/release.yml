# This is a basic workflow to help you get started with Actions

name: Release

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Enter the version number (e.g. x.y.z , default "patch")'
        required: true
        default: 'patch'
        type: string
      ignoreTests:
        description: 'Ignore test success'
        required: true
        type: boolean
        default: false

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # In order to prepare the release we first of all run the testing workflow
  build_and_test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: github-actions-tests

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Setup Node version
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # install dependencies
      - name: Install dependencies (dev-install)
        run: npm run dev-install

      # run tests
      - name: Run tests
        if: ${{ github.event.inputs.ignoreTests == 'false' }}
        run: npm run tests
        env:
          DOUBLE_CHECK_POOL_SIZE: 10
          DOUBLE_CHECK_TIMEOUT_FACTOR: 5
      - name: Run build
        if: ${{ github.event.inputs.ignoreTests == 'true' }}
        run: npm run build
      # Pushing results to test_reports branch
      - name: Publishing bundles to master branch
        if: ${{ github.event.inputs.ignoreTests == 'true' || success() }}
        run: |
          git config user.email "psk.build.track@gmail.com"
          git config user.name "Build Tracker"
          git switch master
          git pull --all
          git add -f builds/output
          git add -f builds/output
          npm version ${{ github.event.inputs.version }} -no-git-tag-version --force
          git add package.json
          git commit --message "Publishing new release bundles"
          package_version=$(grep version package.json | awk -F \" '{print $4}')
          git tag "v$package_version"
          git tag -l
          git log --name-status HEAD^..HEAD
          git push --tags origin
          git push origin master
        env:
          GIT_TOKEN: ${{secrets.TOKEN}}
